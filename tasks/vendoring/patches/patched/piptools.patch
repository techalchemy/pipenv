diff --git a/pipenv/patched/piptools/locations.py b/pipenv/patched/piptools/locations.py
index 4e6174c..75f9b49 100644
--- a/pipenv/patched/piptools/locations.py
+++ b/pipenv/patched/piptools/locations.py
@@ -2,10 +2,13 @@ import os
 from shutil import rmtree
 
 from .click import secho
-from ._compat import user_cache_dir
+# Patch by vphilippon 2017-11-22: Use pipenv cache path.
+# from ._compat import user_cache_dir
+from pipenv.environments import PIPENV_CACHE_DIR
 
 # The user_cache_dir helper comes straight from pip itself
-CACHE_DIR = user_cache_dir('pip-tools')
+# CACHE_DIR = user_cache_dir(os.path.join('pip-tools'))
+CACHE_DIR = PIPENV_CACHE_DIR
 
 # NOTE
 # We used to store the cache dir under ~/.pip-tools, which is not the
diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index 1c4b943..e412a1f 100644
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -15,10 +15,16 @@ from .._compat import (
     Wheel,
     FAVORITE_HASH,
     TemporaryDirectory,
-    PyPI
+    PyPI,
+    InstallRequirement,
+    SafeFileCache,
 )
 
+from notpip._vendor.packaging.requirements import InvalidRequirement
+from notpip._vendor.pyparsing import ParseException
+
 from ..cache import CACHE_DIR
+from pipenv.environments import PIPENV_CACHE_DIR
 from ..exceptions import NoCandidateFound
 from ..utils import (fs_str, is_pinned_requirement, lookup_table,
                      make_install_requirement)
@@ -26,15 +32,49 @@ from .base import BaseRepository
 
 
 try:
-    from pip._internal.operations.prepare import RequirementPreparer
-    from pip._internal.resolve import Resolver as PipResolver
+    from notpip._internal.operations.prepare import RequirementPreparer
+    from notpip._internal.resolve import Resolver as PipResolver
 except ImportError:
     pass
 
 try:
-    from pip._internal.cache import WheelCache
+    from notpip._internal.cache import WheelCache
 except ImportError:
-    from pip.wheel import WheelCache
+    from notpip.wheel import WheelCache
+
+
+class HashCache(SafeFileCache):
+    """Caches hashes of PyPI artifacts so we do not need to re-download them
+
+    Hashes are only cached when the URL appears to contain a hash in it and the cache key includes
+    the hash value returned from the server). This ought to avoid ssues where the location on the
+    server changes."""
+    def __init__(self, *args, **kwargs):
+        session = kwargs.pop('session')
+        self.session = session
+        kwargs.setdefault('directory', os.path.join(PIPENV_CACHE_DIR, 'hash-cache'))
+        super(HashCache, self).__init__(*args, **kwargs)
+
+    def get_hash(self, location):
+        # if there is no location hash (i.e., md5 / sha256 / etc) we on't want to store it
+        hash_value = None
+        can_hash = location.hash
+        if can_hash:
+            # hash url WITH fragment
+            hash_value = self.get(location.url)
+        if not hash_value:
+            hash_value = self._get_file_hash(location)
+            hash_value = hash_value.encode('utf8')
+        if can_hash:
+            self.set(location.url, hash_value)
+        return hash_value.decode('utf8')
+
+    def _get_file_hash(self, location):
+        h = hashlib.new(FAVORITE_HASH)
+        with open_local_or_remote_file(location, self.session) as fp:
+            for chunk in iter(lambda: fp.read(8096), b""):
+                h.update(chunk)
+        return ":".join([FAVORITE_HASH, h.hexdigest()])
 
 
 class PyPIRepository(BaseRepository):
@@ -46,10 +86,11 @@ class PyPIRepository(BaseRepository):
     config), but any other PyPI mirror can be used if index_urls is
     changed/configured on the Finder.
     """
-    def __init__(self, pip_options, session):
+    def __init__(self, pip_options, session, use_json=False):
         self.session = session
+        self.use_json = use_json
         self.pip_options = pip_options
-        self.wheel_cache = WheelCache(CACHE_DIR, pip_options.format_control)
+        self.wheel_cache = WheelCache(PIPENV_CACHE_DIR, pip_options.format_control)
 
         index_urls = [pip_options.index_url] + pip_options.extra_index_urls
         if pip_options.no_index:
@@ -74,11 +115,15 @@ class PyPIRepository(BaseRepository):
         # of all secondary dependencies for the given requirement, so we
         # only have to go to disk once for each requirement
         self._dependencies_cache = {}
+        self._json_dep_cache = {}
+
+        # stores *full* path + fragment => sha256
+        self._hash_cache = HashCache(session=session)
 
         # Setup file paths
         self.freshen_build_caches()
-        self._download_dir = fs_str(os.path.join(CACHE_DIR, 'pkgs'))
-        self._wheel_download_dir = fs_str(os.path.join(CACHE_DIR, 'wheels'))
+        self._download_dir = fs_str(os.path.join(PIPENV_CACHE_DIR, 'pkgs'))
+        self._wheel_download_dir = fs_str(os.path.join(PIPENV_CACHE_DIR, 'wheels'))
 
     def freshen_build_caches(self):
         """
@@ -116,8 +161,11 @@ class PyPIRepository(BaseRepository):
 
         all_candidates = self.find_all_candidates(ireq.name)
         candidates_by_version = lookup_table(all_candidates, key=lambda c: c.version, unique=True)
-        matching_versions = ireq.specifier.filter((candidate.version for candidate in all_candidates),
+        try:
+            matching_versions = ireq.specifier.filter((candidate.version for candidate in all_candidates),
                                                   prereleases=prereleases)
+        except TypeError:
+            matching_versions = [candidate.version for candidate in all_candidates]
 
         # Reuses pip's internal candidate sort key to sort
         matching_candidates = [candidates_by_version[ver] for ver in matching_versions]
@@ -126,11 +174,60 @@ class PyPIRepository(BaseRepository):
         best_candidate = max(matching_candidates, key=self.finder._candidate_sort_key)
 
         # Turn the candidate into a pinned InstallRequirement
-        return make_install_requirement(
-            best_candidate.project, best_candidate.version, ireq.extras, constraint=ireq.constraint
-        )
+        new_req = make_install_requirement(
+            best_candidate.project, best_candidate.version, ireq.extras, ireq.markers, constraint=ireq.constraint
+         )
+
+        # KR TODO: Marker here?
+
+        return new_req
+
+    def get_json_dependencies(self, ireq):
+
+        if not (is_pinned_requirement(ireq)):
+            raise TypeError('Expected pinned InstallRequirement, got {}'.format(ireq))
+
+        def gen(ireq):
+            if self.DEFAULT_INDEX_URL in self.finder.index_urls:
+
+                url = 'https://pypi.org/pypi/{0}/json'.format(ireq.req.name)
+                r = self.session.get(url)
+
+                # TODO: Latest isn't always latest.
+                latest = list(r.json()['releases'].keys())[-1]
+                if str(ireq.req.specifier) == '=={0}'.format(latest):
+                    latest_url = 'https://pypi.org/pypi/{0}/{1}/json'.format(ireq.req.name, latest)
+                    latest_requires = self.session.get(latest_url)
+                    for requires in latest_requires.json().get('info', {}).get('requires_dist', {}):
+                        i = InstallRequirement.from_line(requires)
+
+                        if 'extra' not in repr(i.markers):
+                            yield i
+
+        try:
+            if ireq not in self._json_dep_cache:
+                self._json_dep_cache[ireq] = [g for g in gen(ireq)]
+
+            return set(self._json_dep_cache[ireq])
+        except Exception:
+            return set()
 
     def get_dependencies(self, ireq):
+        json_results = set()
+
+        if self.use_json:
+            try:
+                json_results = self.get_json_dependencies(ireq)
+            except TypeError:
+                json_results = set()
+
+        legacy_results = self.get_legacy_dependencies(ireq)
+        json_results.update(legacy_results)
+
+        return json_results
+
+
+    def get_legacy_dependencies(self, ireq):
         """
         Given a pinned or an editable InstallRequirement, returns a set of
         dependencies (also InstallRequirements, but not necessarily pinned).
@@ -139,6 +236,18 @@ class PyPIRepository(BaseRepository):
         if not (ireq.editable or is_pinned_requirement(ireq)):
             raise TypeError('Expected pinned or editable InstallRequirement, got {}'.format(ireq))
 
+        # Collect setup_requires info from local eggs.
+        setup_requires = {}
+        if ireq.editable:
+            try:
+                dist = ireq.get_dist()
+                if dist.has_metadata('requires.txt'):
+                    setup_requires = self.finder.get_extras_links(
+                        dist.get_metadata_lines('requires.txt')
+                    )
+            except TypeError:
+                pass
+
         if ireq not in self._dependencies_cache:
             if ireq.editable and (ireq.source_dir and os.path.exists(ireq.source_dir)):
                 # No download_dir for locally available editable requirements.
@@ -164,11 +273,14 @@ class PyPIRepository(BaseRepository):
                     download_dir=download_dir,
                     wheel_download_dir=self._wheel_download_dir,
                     session=self.session,
+                    ignore_installed=True,
+                    ignore_compatibility=False,
                     wheel_cache=self.wheel_cache,
                 )
-                self._dependencies_cache[ireq] = reqset._prepare_file(
+                result = reqset._prepare_file(
                     self.finder,
-                    ireq
+                    ireq,
+                    ignore_requires_python=True
                 )
             except TypeError:
                 # Pip >= 10 (new resolver!)
@@ -195,9 +307,39 @@ class PyPIRepository(BaseRepository):
                     isolated=False,
                     wheel_cache=self.wheel_cache,
                     use_user_site=False,
+                    ignore_compatibility=False
                 )
                 self.resolver.resolve(reqset)
-                self._dependencies_cache[ireq] = reqset.requirements.values()
+                result = reqset.requirements.values()
+            # Convert setup_requires dict into a somewhat usable form.
+            if setup_requires:
+                for section in setup_requires:
+                    python_version = section
+                    not_python = not (section.startswith('[') and ':' in section)
+
+                    for value in setup_requires[section]:
+                        # This is a marker.
+                        if value.startswith('[') and ':' in value:
+                            python_version = value[1:-1]
+                            not_python = False
+                        # Strip out other extras.
+                        if value.startswith('[') and ':' not in value:
+                            not_python = True
+
+                        if ':' not in value:
+                            try:
+                                if not not_python:
+                                    result = result + [InstallRequirement.from_line("{0}{1}".format(value, python_version).replace(':', ';'))]
+                            # Anything could go wrong here — can't be too careful.
+                            except Exception:
+                                pass
+            requires_python = reqset.requires_python if hasattr(reqset, 'requires_python') else self.resolver.requires_python
+            if requires_python:
+                marker = 'python_version=="{0}"'.format(requires_python.replace(' ', ''))
+                new_req = InstallRequirement.from_line('{0}; {1}'.format(str(ireq.req), marker))
+                result = [new_req]
+
+            self._dependencies_cache[ireq] = result
             reqset.cleanup_files()
         return set(self._dependencies_cache[ireq])
 
@@ -224,17 +366,10 @@ class PyPIRepository(BaseRepository):
         matching_candidates = candidates_by_version[matching_versions[0]]
 
         return {
-            self._get_file_hash(candidate.location)
+            self._hash_cache.get_hash(candidate.location)
             for candidate in matching_candidates
         }
 
-    def _get_file_hash(self, location):
-        h = hashlib.new(FAVORITE_HASH)
-        with open_local_or_remote_file(location, self.session) as fp:
-            for chunk in iter(lambda: fp.read(8096), b""):
-                h.update(chunk)
-        return ":".join([FAVORITE_HASH, h.hexdigest()])
-
     @contextmanager
     def allow_all_wheels(self):
         """
diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index 05ec8fd..6380e8f 100644
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -14,7 +14,7 @@ from . import click
 from .cache import DependencyCache
 from .exceptions import UnsupportedConstraint
 from .logging import log
-from .utils import (format_requirement, format_specifier, full_groupby,
+from .utils import (format_requirement, format_specifier, full_groupby, dedup,
                     is_pinned_requirement, key_from_ireq, key_from_req, UNSAFE_PACKAGES)
 
 green = partial(click.style, fg='green')
@@ -28,6 +28,7 @@ class RequirementSummary(object):
     def __init__(self, ireq):
         self.req = ireq.req
         self.key = key_from_req(ireq.req)
+        self.markers = ireq.markers
         self.extras = str(sorted(ireq.extras))
         self.specifier = str(ireq.specifier)
 
@@ -71,7 +72,7 @@ class Resolver(object):
         with self.repository.allow_all_wheels():
             return {ireq: self.repository.get_hashes(ireq) for ireq in ireqs}
 
-    def resolve(self, max_rounds=10):
+    def resolve(self, max_rounds=12):
         """
         Finds concrete package versions for all the given InstallRequirements
         and their recursive dependencies.  The end result is a flat list of
@@ -120,7 +121,7 @@ class Resolver(object):
     @staticmethod
     def check_constraints(constraints):
         for constraint in constraints:
-            if constraint.link is not None and not constraint.editable:
+            if constraint.link is not None and not constraint.editable and not constraint.is_wheel:
                 msg = ('pip-compile does not support URLs as packages, unless they are editable. '
                        'Perhaps add -e option?')
                 raise UnsupportedConstraint(msg, constraint)
@@ -147,15 +148,18 @@ class Resolver(object):
             if editable_ireq:
                 yield editable_ireq  # ignore all the other specs: the editable one is the one that counts
                 continue
-
             ireqs = iter(ireqs)
             # deepcopy the accumulator so as to not modify the self.our_constraints invariant
             combined_ireq = copy.deepcopy(next(ireqs))
-            combined_ireq.comes_from = None
             for ireq in ireqs:
                 # NOTE we may be losing some info on dropped reqs here
-                combined_ireq.req.specifier &= ireq.req.specifier
+                try:
+                    combined_ireq.req.specifier &= ireq.req.specifier
+                except TypeError:
+                    if ireq.req.specifier._specs and not combined_ireq.req.specifier._specs:
+                        combined_ireq.req.specifier._specs = ireq.req.specifier._specs
                 combined_ireq.constraint &= ireq.constraint
+                combined_ireq.markers = ireq.markers
                 # Return a sorted, de-duped tuple of extras
                 combined_ireq.extras = tuple(sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras))))
             yield combined_ireq
@@ -273,6 +277,16 @@ class Resolver(object):
             for dependency in self.repository.get_dependencies(ireq):
                 yield dependency
             return
+        elif ireq.markers:
+            for dependency in self.repository.get_dependencies(ireq):
+                dependency.prepared = False
+                yield dependency
+            return
+        elif ireq.extras:
+            for dependency in self.repository.get_dependencies(ireq):
+                dependency.prepared = False
+                yield dependency
+            return
         elif not is_pinned_requirement(ireq):
             raise TypeError('Expected pinned or editable requirement, got {}'.format(ireq))
 
@@ -283,14 +297,25 @@ class Resolver(object):
         if ireq not in self.dependency_cache:
             log.debug('  {} not in cache, need to check index'.format(format_requirement(ireq)), fg='yellow')
             dependencies = self.repository.get_dependencies(ireq)
-            self.dependency_cache[ireq] = sorted(str(ireq.req) for ireq in dependencies)
+            import sys
+            self.dependency_cache[ireq] = sorted(format_requirement(ireq) for ireq in dependencies)
 
         # Example: ['Werkzeug>=0.9', 'Jinja2>=2.4']
         dependency_strings = self.dependency_cache[ireq]
         log.debug('  {:25} requires {}'.format(format_requirement(ireq),
                                                ', '.join(sorted(dependency_strings, key=lambda s: s.lower())) or '-'))
+        from notpip._vendor.packaging.markers import InvalidMarker
         for dependency_string in dependency_strings:
-            yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
+            try:
+                _dependency_string = dependency_string
+                if ';' in dependency_string:
+                    # split off markers and remove any duplicates by comparing against deps
+                    _dependencies = [dep.strip() for dep in dependency_string.split(';')]
+                    _dependency_string = '; '.join([dep for dep in dedup(_dependencies)])
+
+                yield InstallRequirement.from_line(_dependency_string, constraint=ireq.constraint)
+            except InvalidMarker:
+                yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
 
     def reverse_dependencies(self, ireqs):
         non_editable = [ireq for ireq in ireqs if not ireq.editable]
diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
index fde5816..d76695d 100644
--- a/pipenv/patched/piptools/utils.py
+++ b/pipenv/patched/piptools/utils.py
@@ -43,16 +43,21 @@ def comment(text):
     return style(text, fg='green')
 
 
-def make_install_requirement(name, version, extras, constraint=False):
+def make_install_requirement(name, version, extras, markers, constraint=False):
     # If no extras are specified, the extras string is blank
     extras_string = ""
     if extras:
         # Sort extras for stability
         extras_string = "[{}]".format(",".join(sorted(extras)))
 
-    return InstallRequirement.from_line(
-        str('{}{}=={}'.format(name, extras_string, version)),
-        constraint=constraint)
+    if not markers:
+        return InstallRequirement.from_line(
+            str('{}{}=={}'.format(name, extras_string, version)),
+            constraint=constraint)
+    else:
+        return InstallRequirement.from_line(
+            str('{}{}=={}; {}'.format(name, extras_string, version, str(markers))),
+            constraint=constraint)
 
 
 def format_requirement(ireq, marker=None):
@@ -66,7 +71,7 @@ def format_requirement(ireq, marker=None):
         line = str(ireq.req).lower()
 
     if marker:
-        line = '{} ; {}'.format(line, marker)
+        line = '{}; {}'.format(line, marker)
 
     return line
 
diff --git a/pipenv/patched/piptools/_compat/pip_compat.py b/pipenv/patched/piptools/_compat/pip_compat.py
index 7e8cdf3..4e4e1b2 100644
--- a/pipenv/patched/piptools/_compat/pip_compat.py
+++ b/pipenv/patched/piptools/_compat/pip_compat.py
@@ -1,30 +1,41 @@
 # -*- coding=utf-8 -*-
 import importlib
 
-def do_import(module_path, subimport=None, old_path=None):
+
+def do_import(module_path, subimport=None, old_path=None, vendored_name=None):
     internal = 'pip._internal.{0}'.format(module_path)
     old_path = old_path or module_path
     pip9 = 'pip.{0}'.format(old_path)
-    try:
-        _tmp = importlib.import_module(internal)
-    except ImportError:
-        _tmp = importlib.import_module(pip9)
+    _tmp = None
+    if vendored_name:
+        vendor = '{0}._internal'.format(vendored_name)
+        vendor = '{0}.{1}'.format(vendor, old_path if old_path else module_path)
+        try:
+            _tmp = importlib.import_module(vendor)
+        except ImportError:
+            pass
+    if not _tmp:
+        try:
+            _tmp = importlib.import_module(internal)
+        except ImportError:
+            _tmp = importlib.import_module(pip9)
     if subimport:
         return getattr(_tmp, subimport, _tmp)
     return _tmp
     
 
-InstallRequirement = do_import('req.req_install', 'InstallRequirement')
-parse_requirements = do_import('req.req_file', 'parse_requirements')
-RequirementSet = do_import('req.req_set', 'RequirementSet')
-user_cache_dir = do_import('utils.appdirs', 'user_cache_dir')
-FAVORITE_HASH = do_import('utils.hashes', 'FAVORITE_HASH')
-is_file_url = do_import('download', 'is_file_url')
-url_to_path = do_import('download', 'url_to_path')
-PackageFinder = do_import('index', 'PackageFinder')
-FormatControl = do_import('index', 'FormatControl')
-Wheel = do_import('wheel', 'Wheel')
-Command = do_import('basecommand', 'Command')
-cmdoptions = do_import('cmdoptions')
-get_installed_distributions = do_import('utils.misc', 'get_installed_distributions', old_path='utils')
-PyPI = do_import('models.index', 'PyPI')
+InstallRequirement = do_import('req.req_install', 'InstallRequirement', vendored_name='notpip')
+parse_requirements = do_import('req.req_file', 'parse_requirements', vendored_name='notpip')
+RequirementSet = do_import('req.req_set', 'RequirementSet', vendored_name='notpip')
+user_cache_dir = do_import('utils.appdirs', 'user_cache_dir', vendored_name='notpip')
+FAVORITE_HASH = do_import('utils.hashes', 'FAVORITE_HASH', vendored_name='notpip')
+is_file_url = do_import('download', 'is_file_url', vendored_name='notpip')
+url_to_path = do_import('download', 'url_to_path', vendored_name='notpip')
+PackageFinder = do_import('index', 'PackageFinder', vendored_name='notpip')
+FormatControl = do_import('index', 'FormatControl', vendored_name='notpip')
+Wheel = do_import('wheel', 'Wheel', vendored_name='notpip')
+Command = do_import('basecommand', 'Command', vendored_name='notpip')
+cmdoptions = do_import('cmdoptions', vendored_name='notpip')
+get_installed_distributions = do_import('utils.misc', 'get_installed_distributions', old_path='utils', vendored_name='notpip')
+PyPI = do_import('models.index', 'PyPI', vendored_name='notpip')
+SafeFileCache = do_import('download', 'SafeFileCache', vendored_name='notpip')
diff --git a/pipenv/patched/piptools/_compat/__init__.py b/pipenv/patched/piptools/_compat/__init__.py
index 674674a..4259028 100644
--- a/pipenv/patched/piptools/_compat/__init__.py
+++ b/pipenv/patched/piptools/_compat/__init__.py
@@ -27,4 +27,5 @@ from .pip_compat import (
     cmdoptions,
     get_installed_distributions,
     PyPI,
+    SafeFileCache,
 )
